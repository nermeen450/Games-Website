//loop
@for $i from 1 through 10{
    .class-#{$i}{
        font-size: #{$i + 10px};
    }
}
$dimensions:0;
@for $i from 1 through 10 {
    .circle-#{100 + #{$dimensions}}{
        border-radius: 50%;
        width: $dimensions + 100px;
        height: $dimensions + 100px;
    }
    $dimensions: $dimensions + 100px;
}
@mixin circle($dimensions) {
    border-radius: 50%;
    width: $dimensions;
    height: $dimensions;
}

@mixin centering {
    display: flex;
    justify-content: center;
    align-items: center;
}
//each theme
$themes: red, blue, green,black;
@each $theme in $themes {
    .#{$theme}-theme{
        .product{
            background-color: white;
            border-bottom: 2px solid ;
            .title{
                color: $theme;
            }
        }
    }
}
$socials:(
    "facebook":"blue",
    "youtube":"red",
    "gethub":"black"
);
@each $name, $color in $socials {
    .#{$name}{
        background-color: $color;
        color: white;
        &::before{
            content: $name;
        }
    }
}
$classes:"one" 20px red, 'two' 30px blue, "three" 40px green;
@each $class, $font-size, $colo in $classes {
    .#{$class}{
        font-size: $font-size;
        color: $colo;
    }
}
$start: 1;
@while $start <= 10 {
    .width-#{$start}{
        width: $start * 100;
        height: ($start * 100) / 2;
    }
    $start: $start + 1;
}
//grid-system
$grid-cols: 12;
@for $i from 1 through $grid-cols {
    .col-#{$i}{
        width: percentage($i / $grid-cols);
    }
}
$grid-cols: 16;
@for $i from 1 through $grid-cols {
    .col-#{$i}{
        width: percentage($i / $grid-cols);
    }
}
//function
@function half($size){
    @return $size / 2;
}
@function cal($sizes...){
    $total : 0;
    @each $size in $sizes {
        $total : $total + $size;
    }
    @return $total;

}
.box{
    width: half(100px);
    top: cal(100px, 200px, 300px);
}
@mixin overlay ($color, $opacity){
    .overlay-#{$color}{
        position: absolute;
        content: " ";
        width: 100%;
        height: 100%;
        top: 0;
        left: 0;
        background-color: rgba($color, $opacity);
    }
}
.ke{
    @include overlay(red, 0.4);
}
@mixin keyF($animate-name) {
    @-webkit-keyframes #{$animate-name} {
      @content;
    }
    @keyframes #{$animate-name} {
        @content;
    }
}
@include keyF(fade-in){
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
};
@include keyF(go-up){
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
};
@mixin breakpoints ($breaks){
    @if $break == mobile {
        @media (max-width: 768px){
            @content;
        }
    }
    @else if $break == small {
        @media (min-width: 768px) and (max-width :991px){
            @content;
        }
    }
    @else if $break == medium {
        @media (min-width: 991px) and (max-width :1200px){
            @content;
        }
    }
    @else if $break == medium  {
        @media (min-width :1200px){
            @content;
        }
    }
}
.media{
    @include breakpoints(mobile){
        font-size: 15px;
    }
}